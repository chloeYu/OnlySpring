<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="postns">
	<resultMap type="post" id="postResult">
		<id property="pid" column="pid" />
		<result property="userid" column="userid" />
		<result property="type" column="type" />
		<result property="likes" column="likes" />
		<result property="created" column="created" />
		<result property="del" column="del" />
		<result property="username" column="username" />
		<result property="modified" column="modified" />
		<result property="text" column="text" />
	</resultMap>
	
	<resultMap type="postFiles" id="postFilesResult">
		<id property="pid" column="pid" />
		<result property="url" column="url" />
		<result property="seq" column="seq" />
	</resultMap>
	
	<resultMap type="location" id="locationResult">
		<id property="pid" column="pid" />
		<result property="place" column="place" />
		<result property="lat" column="lat" />
		<result property="lng" column="lng" />
	</resultMap>
	
	<select id="timelinelist" parameterType="String" resultMap="postResult">
 		<!-- select p.*, m.username from post p, member m where p.userid=#{userid} and p.userid = m.userid order by pid desc; -->
		<!-- select * from post where userid=#{userid} -->
		<!-- 친구 포스트 추가 -->
		<!-- select p.*, m.username from post p, member m where p.userid in (select distinct(userid) from (select m.* from member m join follow f on (f.uid1 = m.userid or f.uid2 = m.userid) where (f.status = 1 and (f.uid1=#{userid} or f.uid2=#{userid} ))) a) and p.userid = m.userid order by pid desc; -->
		<!-- 친구 포스트 + 멤버 태그 추가 -->
		select filtered_post.*, m.username from (select p.* from post p where userid in (select distinct(userid) from (select m.* from member m join follow f on (f.uid1 = m.userid or f.uid2 = m.userid) where (f.status = 1 and (f.uid1=#{userid} or f.uid2=#{userid} ))) a) or pid in (select distinct(pid) from post_membertag where userid = #{userid})) filtered_post, member m where  filtered_post.userid = m.userid order by pid desc;
		
	</select>
	
	<select id="bloglist" parameterType="String" resultMap="postResult">
		select p.*, m.username from post p, member m where p.userid=#{ownerid} and p.userid = m.userid order by pid desc;
	</select>

	<select id="getTimelineTotal" parameterType="String" resultType="int">
		select count(pid) from post where userid=#{userid}
	</select>
	
	<select id="getBlogTotal" parameterType="String" resultType="int">
		select count(pid) from post where userid=#{ownerid}
	</select>

	<select id="getImagesByUserid" parameterType="String" resultType='String'>
		select url from POST_FILES where pid in (select pid from post where userid = #{userid} order by pid); 
	</select>
	
	<select id="getImageTotal" parameterType="String" resultType="int">
		select count(*) from POST_FILES where pid in (select pid from post where userid = #{userid} order by pid); 
	</select>
	
	<select id="getType" parameterType="String" resultType="String">
		select type from post where pid=#{pid}
	</select>

	<select id="getPost" parameterType="String" resultType="post">
		select * from post where pid=#{pid}
	</select>

	<select id="getPostText" parameterType="String" resultType="String">
		select text from POST_TEXT where pid=#{pid}
	</select>
	
	<select id="getFilePath" parameterType="String" resultMap="postFilesResult">
		select * from POST_FILES where pid=#{pid} order by seq
	</select>
	
	<select id="nextPid" resultType="int">
		select IFNULL(MAX(pid), 0) + 1 from post
	</select>
	
	<select id="getLikesCount" parameterType="int" resultType="int">
		select likes from post where pid = #{lid}
	</select>
	
	<insert id="insert" parameterType="post">
		insert into POST values(#{pid},#{userid}, #{type}, 0, now(), now(),'n')
	</insert>
	
	<insert id="insertText" parameterType="hashMap">
		insert into POST_TEXT values (#{pid}, #{text}) 
	</insert>
	
	<insert id="insertFiles" parameterType="postFiles">
		insert into POST_FILES values (#{pid}, #{url}, #{seq})
	</insert>
	
	<insert id="insertLocation" parameterType="location">
		insert into POST_LOCATION values(#{pid}, #{place}, #{lat}, #{lng})
	</insert>
	
	<insert id="insertMemberTag" parameterType="hashMap">
		insert into POST_MEMBERTAG values(#{pid}, #{member})
	</insert>
	
	<select id="getLocation" parameterType="int" resultType="location">
		select * from POST_LOCATION where pid = #{pid}
	</select>
	
	<select id="getTaggedFriends" parameterType="int" resultType="string">
		select userid from POST_MEMBERTAG where pid=#{pid}
	</select>
	<insert id="insertHashTag" parameterType="hashMap">
		insert into POST_HASHTAG values(#{pid}, #{hashTag})
	</insert>
</mapper>

